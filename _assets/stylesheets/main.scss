@charset 'utf-8';

@import 'bourbon';


////////////////////////////////////////////////////////////////////////////////
// #  Variables
//
// Much of the typographic sizing for the body is setup here to accompany body
// text set at 16px.
//
$leading-body:            1.8;
$leading-heading:         1.4;
$type-size-body:          16;

// ## Spacing based on the leading (the line-height).
//
// This spacing unit is relative to the element’s font-size/$leading-body. We
// setup the leading (base line-hight) as our spacing unit (in ems).
//
$line-single:             ($leading-body * 1em); // 1.6em
$line-double:             ($line-single * 2);
$line-three-quarter:      ($line-single * .75);
$line-half:               ($line-single / 2);
$line-quarter:            ($line-single / 4);


// ## Media query breakpoints
//
/// Extra-small breakpoint.
//
$viewport-xs: 576px !global;

/// Small breakpoint.
///
/// @type string
$viewport-sm: 768px !global;

/// Medium breakpoint.
///
/// @type string
$viewport-md: 992px !global;

/// Large (desktop) breakpoint.
///
/// @type string
$viewport-lg: 1200px !global;

// ## Colours
//
$white:                   #fff;
$black:                   #000;

$off-white:               #f0f3f5;
$off-black:               #101010;

$yellow:                  #eccf00;

$grey:                    #6e6e6e;
$light-grey:              lighten($grey, 15%);
$lighter-grey:            lighten($grey, 35%);
$transparent-grey:        rgba(0, 0, 0, 0.1);


$action-colour:           #477dca;


// ## Type families
//
$font-stack-monospace: 'Operator Mono', 'Lucida Sans Typewriter', 'Lucida Console', Monaco, 'Bitstream Vera Sans Mono', monospace;

$font-stack-system: (
	-apple-system,
	BlinkMacSystemFont,
	'Avenir Next',
	'Avenir',
	'Segoe UI',
	'Lucida Grande',
	'Helvetica Neue',
	'Helvetica',
	'Fira Sans',
	'Roboto',
	'Noto',
	'Droid Sans',
	'Cantarell',
	'Oxygen',
	'Ubuntu',
	'Franklin Gothic Medium',
	'Century Gothic',
	'Liberation Sans',
	sans-serif,
);

$font-stack-serif: Cambria, "Hoefler Text", Utopia, "Liberation Serif", "Nimbus Roman No9 L Regular", Times, "Times New Roman", serif;

$base-duration: 150ms;
$base-timing: ease;


////////////////////////////////////////////////////////////////////////////////
// #  Mixins & functions

// ## Pixel to rem function
//
// Input: unitless numbers (the intended pixel value output).
//
// Assumes that the the body or html has a font-size of 16px.
//
// Effectively re-implements Bourbon’s pixel to rem calc function from <5.0.0.
//
@function rem($pxval) {
	$base-size: $type-size-body;

	@return ($pxval / $base-size) * 1rem;
}

@mixin sr-only {
	border: 0;
	clip: rect(0, 0, 0, 0);
	height: 1px;
	margin: -1px;
	overflow: hidden;
	padding: 0;
	position: absolute;
	width: 1px;
}


@mixin ie-clearfix {
	&::after {
		clear: both;
		content: '';
		display: table;
		height: 0;
	}
}


// ## Replace a string with a string
// http://codepen.io/jakob-e/pen/doMoML
//
// @author @eriksen_dk <https://twitter.com/eriksen_dk>
//
// @param  {string} $string   - The haystack string to be manipulated
// @param  {string} $search   - The needle to be replace
// @param  {string} $replace  - The replacement
//
// @return {string}           - The manipulated string with replaced values
@function replace( $string, $search, $replace: '' ) {
	@if type-of( $string ) != 'string' {
		@error "The first argument for replace must be a string.";
	}
	@if type-of( $search ) != 'string' {
		@error "The second argument for replace must be a string.";
	}
	@if type-of( $replace ) != 'string' {
		@error "The third argument for replace must be a string.";
	}
	$index: str-index( $string, $search );
	@return if( $index,
		str-slice( $string, 1, $index - 1 ) +
		$replace +
		replace(
			str-slice( $string, $index + str-length( $search )
		), $search, $replace ),
		$string
	);
}


/// Media query mixin.
///
/// Inlude the mixin and pass it one of the breakpoint keywords as an argument to
/// create a media query.
///
/// @param     {keywords} $breakpoint   anyone one of: `xs`, `sm`, `md`, `lg`
///
/// @output    Styles passed in `@content`, wrapped inside a media query matching breakpoint given as a keyword.
///
@mixin breakpoint($breakpoint) {
	@if type-of($breakpoint) != 'string' {
		@error 'ERROR: the breakpoint() mixin only accepts strings!';
	}

	@if $breakpoint != 'xs'
		and $breakpoint != 'sm'
		and $breakpoint != 'md'
		and $breakpoint != 'lg' {
		@error 'ERROR: the breakpoint() only takes the following breakpoint strings: `xs`, `sm`, `md`, `lg`!';
	}

	@if ($breakpoint == 'xs') {
		@media (min-width: $viewport-xs) {
			@content;
		}
	}

	@if ($breakpoint == 'sm') {
		@media (min-width: $viewport-sm) {
			@content;
		}
	}

	@if ($breakpoint == 'md') {
		@media (min-width: $viewport-md) {
			@content;
		}
	}

	@if ($breakpoint == 'lg') {
		@media (min-width: $viewport-lg) {
			@content;
		}
	}
}


// ## Generate an optimized SVG data-uri for
// https://codepen.io/tigt/post/optimizing-svgs-in-data-uris
// http://codepen.io/jakob-e/pen/doMoML
//
// @author @eriksen_dk <https://twitter.com/eriksen_dk>
//
// @param  {string} $svg - The SVG to be converted
//
// @return {string}      - An optimized data-uri
@function svguri( $svg ) {
	@if type-of( $svg ) != 'string' {
		@error "The svguri function only takes a string.";
	}
	@if not str-index( $svg, xmlns ) { //Add missing namespace
		$svg: replace( $svg, '<svg','<svg xmlns="http://www.w3.org/2000/svg"' );
	}
	$encoded:'';
	$slice: 2000;
	$index: 0;
	$loops: ceil( str-length( $svg ) / $slice ); //Chunk up string in order to avoid "stack level too deep" error
	@for $i from 1 through $loops {
		$chunk: str-slice( $svg, $index, $index + $slice - 1 );
		$chunk: replace( $chunk,'"', "'" );
		$chunk: replace( $chunk,'	', " " );
		$chunk: replace( $chunk,'  ', " " );
		$chunk: replace( $chunk,'%', '%25' );
		$chunk: replace( $chunk,'&', '%26' );
		$chunk: replace( $chunk,'#', '%23' );
		$chunk: replace( $chunk,'{', '%7B' );
		$chunk: replace( $chunk,'}', '%7D' );
		$chunk: replace( $chunk,'<', '%3C' );
		$chunk: replace( $chunk,'>', '%3E' );

		/*    The maybe list
			 Keep size and compile time down
			 ... only add on documented fail
		 $chunk: uikit-replace( $chunk, '|', '%7C' );
		 $chunk: uikit-replace( $chunk, '[', '%5B' );
		 $chunk: uikit-replace( $chunk, ']', '%5D' );
		 $chunk: uikit-replace( $chunk, '^', '%5E' );
		 $chunk: uikit-replace( $chunk, '`', '%60' );
		 $chunk: uikit-replace( $chunk, ';', '%3B' );
		 $chunk: uikit-replace( $chunk, '?', '%3F' );
		 $chunk: uikit-replace( $chunk, ':', '%3A' );
		 $chunk: uikit-replace( $chunk, '@', '%40' );
		 $chunk: uikit-replace( $chunk, '=', '%3D' );
		*/

		$encoded: #{ $encoded }#{ $chunk };
		$index: $index + $slice;
	}

	@return url("data:image/svg+xml,#{ $encoded }");
}


////////////////////////////////////////////////////////////////////////////////
// #  Custom partial imports
//
@import 'body';
@import 'responsive-media';
@import 'icons';
@import 'headings';
@import 'header';
@import 'navigation';
@import 'main-typography';
@import 'speakers';
@import 'sponsors-stuff';
@import 'footer';
@import 'schedule';
@import 'merch';
